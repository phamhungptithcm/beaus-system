name: CI Build, Test, Version & Docker Build

on:
  push:
    branches:
      - beaus-dev
    paths:
      - '**/*.java'
      - '**/*.properties'
      - 'pom.xml'
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Maven Packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Get Current App Version
        id: get_version
        run: |
          # Use Maven Help Plugin to evaluate the project version
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Current version is: $CURRENT_VERSION"
          echo "APP_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Build and Test with Maven
        run: mvn clean package --file pom.xml

      - name: Build Docker Image with App Version Tag
        run: |
          docker build -t my-springboot-app:${{ env.APP_VERSION }} .

      - name: Bump Next Version in pom.xml
        env:
          CURRENT_VERSION: ${{ env.APP_VERSION }}
        run: |
          # Split version assuming semantic versioning: major.minor.patch(-SNAPSHOT)?
          IFS='.-' read -r major minor patch qualifier <<< "$CURRENT_VERSION"
          echo "Parsed version: major=$major, minor=$minor, patch=$patch, qualifier=$qualifier"
          
          # Bump the patch version. Adjust logic if you want to bump major/minor instead.
          NEW_PATCH=$((patch + 1))
          # Use SNAPSHOT suffix for next development version.
          NEW_VERSION="${major}.${minor}.${NEW_PATCH}-SNAPSHOT"
          echo "Bumping version to: $NEW_VERSION"
          
          # Use Maven Versions Plugin to update the pom.xml version
          mvn versions:set -DnewVersion=${NEW_VERSION} -DgenerateBackupPoms=false
          
          # Configure Git to commit the version bump.
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add pom.xml
          git commit -m "Bump version to ${NEW_VERSION}"
          git push origin HEAD:${{ github.ref }}
